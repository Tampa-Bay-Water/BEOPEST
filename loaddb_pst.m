function loaddb_pst(d_scenario,runname)

% this function relies on the the .pst file generated by create_pst

%% default argument
if nargin < 1 || isempty(d_scenario), d_scenario = '\\kuhntucker\e$\ihm\ppest_20070420'; end
if nargin < 2, runname = 'pp_test'; end

%% Define tables
t_run = 'RunDesc';
t_pargrpDesc = 'ParameterGroupDesc';
t_parDesc = 'ParameterDesc';
t_obsgrpDesc = 'ObservationGroupDesc';
t_obsDesc = 'ObservationDesc';
t_pargrp = 'ParameterGroup';
t_pardat = 'ParameterData';
t_obsgrp = 'ObservationGroup';
t_obsdat = 'ObservationData';

%% read from .pst and load to database
% open database connection and check for runid
conn = database('PPEST','','');
dbmeta = dmd(conn);
runid = fetch(conn,['select RunID from ' t_run ' where Name = ''' runname '''']);
if isempty(runid)
  fastinsert(conn,t_run,{'Name'},{runname});
  runid = fetch(conn,['select RunID from ' t_run ' where Name = ''' runname '''']);
else
  % need to delete existing records
  str_runid = num2str(runid{1});
  for t = {t_pargrp,t_pardat,t_obsgrp,t_obsdat};
    testcol = fetch(conn,['select Name from ' char(t) ' where RunID = ' str_runid]);
    if ~isempty(testcol)
      exec(conn, ['delete from ' char(t) ' where RunID = ' str_runid]);
    end
  end
end
cns_pargrp = columns(dbmeta, 'ppest', 'dbo', t_pargrp);
cns_obsgrp = columns(dbmeta, 'ppest', 'dbo', t_obsgrp);
cns_pardat = columns(dbmeta, 'ppest', 'dbo', t_pardat);
cns_obsdat = columns(dbmeta, 'ppest', 'dbo', t_obsdat);

% Read from .pst
fid = fopen(fullfile(d_scenario,runname,[runname '.pst']),'rt');
linetype = '';
pargrp = []; pardat = [];
obsgrp = []; obsdat = [];
while feof(fid) == 0
  tline = fgetl(fid);
  
  % set linetype
  if ~isempty(regexpi(tline,'^\* parameter groups'))
   linetype = 'pargrp'; continue;
  elseif ~isempty(regexpi(tline,'^\* parameter data'))
   linetype = 'pardat'; continue;
  elseif ~isempty(regexpi(tline,'^\* observation groups'))
   linetype = 'obsgrp'; continue;
  elseif ~isempty(regexpi(tline,'^\* observation data'))
   linetype = 'obsdat'; continue;
  elseif ~isempty(regexpi(tline,'^\* model'))
    break;
  end
  
	switch linetype
    case 'pargrp'
      temp = [runid textscan(tline,'%s%s%f32%f32%s%f32%s')];
      %fastinsert(conn,t_pargrp,cns_pargrp(2:end),temp);
      pargrp = [pargrp; temp];
    case 'pardat'
      temp = [runid textscan(tline,'%s%s%s%f32%f32%f32%s%f32%f32%d8')];
      %fastinsert(conn,t_pardat,cns_pardat(2:end),temp);
      pardat = [pardat; temp];
    case 'obsgrp'
      temp = [runid textscan(tline,'%s')];
      %fastinsert(conn,t_obsgrp,cns_obsgrp(2:end),temp);
      obsgrp = [obsgrp; temp];
    case 'obsdat'
      temp = [runid textscan(tline,'%s%f32%f32%s')];
      %fastinsert(conn,t_obsdat,cns_obsdat(2:end),temp);
      obsdat = [obsdat; temp];
    otherwise % skip
  end
end
fclose(fid);

% Eliminate tie row and add to tied parameter
i_tie = cellfun(@(y) isempty(y),pardat(:,4));
if sum(i_tie)>0
  i_tiedpar = cellfun(@(y) ~isempty(strmatch('tied',y,'exact')),pardat(:,3));
  pardat = [pardat, cell(size(pardat(:,1)))];
  tied_pair = pardat(i_tie,2:3);
  pardat(i_tiedpar,12) = cellfun(@(y) tied_pair{strmatch(y,[tied_pair{:,1}]),2},...
    pardat(i_tiedpar,2),'UniformOutput',false);
  pardat(~i_tiedpar,12) = {NaN};
end

fastinsert(conn,t_pargrp,cns_pargrp(2:end),pargrp);
% fastinsert(conn,t_pardat,cns_pardat(2:end),pardat(~i_tie,:));
i_temp = 1:length(i_tie); i_temp = i_temp(~i_tie);
for i = 1:length(i_temp)
  fastinsert(conn,t_pardat,cns_pardat(2:end),pardat(i,:));
end

% Description is the primary for foreign key
cns = columns(dbmeta, 'ppest', 'dbo', t_obsgrpDesc);
testcol = deblank(fetch(conn,['select ' cns{2} ' from ' t_obsgrpDesc]));
testcol = setdiff(cellstr([obsgrp{:,2}]),testcol);
if ~isempty(testcol)
  fastinsert(conn,t_obsgrpDesc,cns(2),testcol');
end

fastinsert(conn,t_obsgrp,cns_obsgrp(2:end),obsgrp);
% fastinsert(conn,t_obsdat,cns_obsdat(2:end),obsdat);

%% replace fastinsert with bulkinsert
fn = fullfile(d_scenario,runname,[t_obsdat '_table.csv']);
foid = fopen(fn,'wt');
for i = 1:length(obsdat)
  fprintf(foid,'\t%d\t%s\t%e\t%e\t%s\n',...
    obsdat{i,1},char(obsdat{i,2}),obsdat{i,3},obsdat{i,4},char(obsdat{i,5}));
end
fclose(foid);

% Bulk insert - change filename to SQL server bound
fn1 = strrep(fn,'H:\','E:\');
curs = exec(conn,['BULK INSERT ' t_obsdat ' FROM ''' fn1 ...
  ''' WITH (FIRSTROW = 1, DATAFILETYPE = ''char'', MAXERRORS = 1)'...
  ]);
if ~isempty(curs.Message)
  disp(curs.Message);
end
delete(fn);

% description tables
cns = columns(dbmeta, 'ppest', 'dbo', t_pargrpDesc);
testcol = deblank(fetch(conn,['select ' cns{2} ' from ' t_pargrpDesc]));
testcol = setdiff(cellstr([pargrp{:,2}]),testcol); % need to uncell and cellstr
if ~isempty(testcol)
  fastinsert(conn,t_pargrpDesc,cns(2),testcol');
end

cns = columns(dbmeta, 'ppest', 'dbo', t_parDesc);
testcol = deblank(fetch(conn,['select ' cns{2} ' from ' t_parDesc]));
testcol = setdiff(cellstr([pardat{:,2}]),testcol);
if ~isempty(testcol)
  fastinsert(conn,t_parDesc,cns(2),testcol');
end

cns = columns(dbmeta, 'ppest', 'dbo', t_obsDesc);
testcol = deblank(fetch(conn,['select ' cns{2} ' from ' t_obsDesc]));
testcol = setdiff(cellstr([obsdat{:,2}]),testcol);
if ~isempty(testcol)
  fastinsert(conn,t_obsDesc,cns(2),testcol');
end

close(conn)
